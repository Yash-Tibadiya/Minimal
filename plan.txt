Patient Portal – Intake Registration + Email OTP Login (Plan)

1) Current State Analysis
- Framework: Next.js 15 (App Router), TypeScript, Drizzle ORM (Postgres)
- Key deps: next 15.5.3, react 19, drizzle-orm, pg, next-auth 4.24.11 (unused), nodemailer
- DB schema highlights:
  - patients: id, firstName, lastName, email (unique), phone, state, otp (unused), createdAt, etc.
  - email_verification_codes: id, email, code, expiresAt
- Routing and middleware:
  - middleware uses auth wrapper from [src/middleware.ts](src/middleware.ts:1), but [src/auth.ts](src/auth.ts:1) is empty
  - Routes config in [src/routes-config.ts](src/routes-config.ts:1):
    - AppRoutes: /, /login, /verify-token, /thank-you, /not-found
    - API routes: /api/create-patient, /api/login-link, /api/generate-login-link, /api/verify-token
    - publicRoutes: [create-patient, login, login-link, generate-login-link]
    - authRoutes: [verify-token, /api/verify-token]
  - Pages:
    - Home exists, empty intake step page at [src/app/form/[form-type]/[step]/page.tsx](src/app/form/%5Bform-type%5D/%5Bstep%5D/page.tsx:1) (currently empty)
    - NextAuth route file [src/app/api/auth/[...nextauth]/route.ts](src/app/api/auth/%5B...nextauth%5D/route.ts:1) empty
- Observations:
  - Diagram flow wants unauthenticated visitors to access qualification form (/qualification-form/[formType]/[step]); project has /form/[form-type]/[step].
  - Current middleware redirects any unauthenticated, non-public route to /login, which would block /form/* unless we treat it as public.
  - NextAuth v4 is installed but code is written like Auth.js v5 middleware wrapper. To avoid version mismatch and complexity, implement a lightweight custom patient session using signed JWT cookie and keep middleware contract unchanged.

2) Target Flow (per diagram and requirements)
- Not logged in:
  - Can visit intake form at /form/[form-type]/[step]
  - In a step (middle or last), they submit personal info: firstName, lastName, email, state, phone —> register patient via POST /api/create-patient
  - If they already have an account, link sends them to /login
- Login for existing patients:
  - Patient enters email on /login and requests OTP —> POST /api/login-link, email a 6-digit code (nodemailer)
  - Patient enters OTP —> POST /api/verify-token, verify code, then create session cookie and redirect to "/"
- Logged in:
  - Access dashboard ("/")
  - Visiting /login redirects to "/"

3) Design Decisions
- Session mechanism:
  - Custom, patient-only session using HttpOnly signed JWT cookie: "patient_session"
  - JWT payload: { pid, email, iat, exp }
  - Secret: process.env.AUTH_SECRET (required)
- OTP storage:
  - Use email_verification_codes table: { email, code, expiresAt }
  - TTL: 10 minutes; delete/consume on successful verification; upsert by email (remove older pending codes)
- Mailing:
  - Nodemailer SMTP using environment variables
    - SMTP_HOST, SMTP_PORT, SMTP_SECURE (true/false), SMTP_USER, SMTP_PASS, SMTP_FROM
- Middleware:
  - Keep current shape but provide our own auth wrapper in [src/auth.ts](src/auth.ts:1) that:
    - Parses patient_session from cookies in middleware
    - Exposes req.auth to the middleware callback (auth or null)
  - Update middleware to treat any path starting with /form as public
- API Endpoints (all JSON, App Router routes):
  - POST /api/create-patient
    - body: { firstName, lastName, email, state, phone }
    - Behavior: upsert patient by email; update the provided fields; return { patientId }
  - POST /api/login-link
    - body: { email }
    - Behavior: ensure patient exists (optional gentle creation with just email if needed), generate OTP (6 digits), store in email_verification_codes with expiresAt=now+10m, send email with code; return 200
  - POST /api/verify-token
    - body: { email, code }
    - Behavior: validate code and expiry; find patient; issue JWT cookie; delete consumed code; return 200
- Frontend Pages
  - /form/[form-type]/[step]
    - Minimal step UI with a personal information form that POSTs to /api/create-patient
    - "Already have an account? Login" link to /login
  - /login
    - Step 1: email input; submit to /api/login-link; then show OTP UI
    - Step 2: OTP input; submit to /api/verify-token; on success replace to "/"
- Redirect logic remains:
  - Logged-in visiting /login —> redirect to "/"
  - Anonymous visiting non-public route —> redirect to /login
  - Public includes /login, /api/create-patient, /api/login-link, /api/generate-login-link (unused), and any path starting /form

4) Files to Add/Change
- Create/Update
  - [src/auth.ts](src/auth.ts:1)
    - export auth(wrapper) for middleware
    - export getSession(), createSession(response, payload), destroySession(response)
  - [src/middleware.ts](src/middleware.ts:1)
    - Keep existing but treat /form/* as public
  - [src/lib/email.ts](src/lib/email.ts:1)
    - Nodemailer transporter and sendOtpEmail(email, code)
  - [src/app/api/create-patient/route.ts](src/app/api/create-patient/route.ts:1)
  - [src/app/api/login-link/route.ts](src/app/api/login-link/route.ts:1)
  - [src/app/api/verify-token/route.ts](src/app/api/verify-token/route.ts:1)
  - [src/app/login/page.tsx](src/app/login/page.tsx:1)
    - Email form + OTP form (client component)
  - [src/app/form/[form-type]/[step]/page.tsx](src/app/form/%5Bform-type%5D/%5Bstep%5D/page.tsx:1)
    - Implement the personal info form
  - [src/config.ts](src/config.ts:1)
    - Add SMTP and AUTH_SECRET to config export for central access
- Leave as-is
  - [src/app/api/auth/[...nextauth]/route.ts](src/app/api/auth/%5B...nextauth%5D/route.ts:1) (unused)
  - DB schema unchanged (we will use existing patients and email_verification_codes)

5) Environment Variables (required)
- DATABASE_URL=<postgres connection string>
- NEXT_PUBLIC_BASE_URL=<app base url, e.g. http://localhost:3000>
- AUTH_SECRET=<random strong secret used for JWT signing>
- SMTP_HOST=<smtp host>
- SMTP_PORT=<number>
- SMTP_SECURE=<true|false>
- SMTP_USER=<username>
- SMTP_PASS=<password>
- SMTP_FROM="Minimal Health <no-reply@yourdomain.com>"

6) Security/Best Practices
- JWT cookie:
  - HttpOnly, Secure (true in production), SameSite=Lax, Path="/", Max-Age=1 day
- OTP:
  - 6 digits, 10 min expiry, single-use
  - Throttle: basic email-based cooldown can be added later
- API:
  - Validate inputs, normalize email, trim names/phone
- Middleware:
  - Avoid revealing whether an email exists in the system (same message on /api/login-link success)

7) Acceptance Criteria
- Patient can submit personal info in the intake step —> server upserts patient
- Patient can login via email OTP delivery using nodemailer
- OTP verifies and a session cookie is set
- Unauthenticated users can access /form/* and login APIs
- Authenticated users are redirected away from /login to "/"
- Home "/" accessible after login

8) Implementation Order
1. auth/session utilities ([src/auth.ts](src/auth.ts:1))
2. email util ([src/lib/email.ts](src/lib/email.ts:1))
3. API routes: create-patient, login-link, verify-token
4. Update middleware to allow /form/*
5. Implement /login page
6. Implement intake step page (personal info)
7. Manual test the full flow locally

9) Notes on NextAuth
- next-auth 4 is installed but not wired. The current middleware is written like Auth.js v5 but project files are empty. This plan intentionally bypasses NextAuth to implement a patient-only custom session that satisfies the OTP login requirement quickly and cleanly. We can migrate to Auth.js v5 later if desired.
